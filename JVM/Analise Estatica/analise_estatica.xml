<?xml version="1.0" encoding="UTF-8"?>
<results version="2">
    <cppcheck version="1.76.1"/>
    <errors>
        <error id="memleak" severity="error" msg="Memory leak: attType" verbose="Memory leak: attType">
            <location file="CarregaInfo.c" line="226"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;name&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;name&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="GerenciaMetodos.c" line="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;descriptor&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;descriptor&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="GerenciaMetodos.c" line="10"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;name&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;name&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="GerenciaMetodos.c" line="32"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;descriptor&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;descriptor&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="GerenciaMetodos.c" line="32"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;metodo_name&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;metodo_name&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="GerenciaMetodos.c" line="52"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;metodo_descriptor&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;metodo_descriptor&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="GerenciaMetodos.c" line="52"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;m_nome&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;m_nome&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="InicializaClasses.c" line="103"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;m_descriptor&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;m_descriptor&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="InicializaClasses.c" line="103"/>
        </error>
        <error id="memleakOnRealloc" severity="error" msg="Common realloc mistake: &amp;#039;vetorClasses&amp;#039; nulled but not freed upon failure" verbose="Common realloc mistake: &amp;#039;vetorClasses&amp;#039; nulled but not freed upon failure">
            <location file="InicializaClasses.c" line="31"/>
        </error>
        <error id="memleakOnRealloc" severity="error" msg="Common realloc mistake: &amp;#039;vetorClassesEstatico&amp;#039; nulled but not freed upon failure" verbose="Common realloc mistake: &amp;#039;vetorClassesEstatico&amp;#039; nulled but not freed upon failure">
            <location file="InicializaClasses.c" line="32"/>
        </error>
        <error id="memleak" severity="error" msg="Memory leak: temp" verbose="Memory leak: temp">
            <location file="InstrucoesCat1.c" line="58"/>
        </error>
        <error id="memleak" severity="error" msg="Memory leak: temp" verbose="Memory leak: temp">
            <location file="InstrucoesCat1.c" line="69"/>
        </error>
        <error id="memleak" severity="error" msg="Memory leak: temp" verbose="Memory leak: temp">
            <location file="InstrucoesCat1.c" line="80"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;last&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;last&amp;#039; is assigned a value that is never used.">
            <location file="InstrucoesCat2.c" line="632"/>
        </error>
        <error id="memleak" severity="error" msg="Memory leak: temp8" verbose="Memory leak: temp8">
            <location file="InstrucoesCat2.c" line="35"/>
        </error>
        <error id="memleak" severity="error" msg="Memory leak: temp8" verbose="Memory leak: temp8">
            <location file="InstrucoesCat2.c" line="51"/>
        </error>
        <error id="memleak" severity="error" msg="Memory leak: temp" verbose="Memory leak: temp">
            <location file="InstrucoesCat2.c" line="650"/>
        </error>
        <error id="memleak" severity="error" msg="Memory leak: temp8" verbose="Memory leak: temp8">
            <location file="InstrucoesCat2.c" line="669"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;desloc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;desloc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="InstrucoesGerais.c" line="274"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;desloc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;desloc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="InstrucoesGerais.c" line="290"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;desloc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;desloc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="InstrucoesGerais.c" line="307"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;desloc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;desloc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="InstrucoesGerais.c" line="322"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;desloc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;desloc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="InstrucoesGerais.c" line="338"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;desloc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;desloc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="InstrucoesGerais.c" line="354"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;desloc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;desloc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="InstrucoesGerais.c" line="370"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;desloc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;desloc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="InstrucoesGerais.c" line="386"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;desloc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;desloc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="InstrucoesGerais.c" line="402"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;desloc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;desloc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="InstrucoesGerais.c" line="418"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;desloc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;desloc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="InstrucoesGerais.c" line="434"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;desloc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;desloc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="InstrucoesGerais.c" line="450"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;desloc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;desloc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="InstrucoesGerais.c" line="466"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;desloc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;desloc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="InstrucoesGerais.c" line="482"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;classIndex&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;classIndex&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="InstrucoesGerais.c" line="632"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;classIndex&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;classIndex&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="InstrucoesGerais.c" line="666"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;nameIndex&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;nameIndex&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="InstrucoesGerais.c" line="704"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;method&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;method&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="InstrucoesGerais.c" line="790"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bytes&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bytes&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="InstrucoesGerais.c" line="791"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;j&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;j&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="InstrucoesGerais.c" line="795"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;numParams&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;numParams&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="InstrucoesGerais.c" line="795"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;classIndex&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;classIndex&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="InstrucoesGerais.c" line="795"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bytes&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bytes&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="InstrucoesGerais.c" line="890"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bytes&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bytes&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="InstrucoesGerais.c" line="938"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;desloc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;desloc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="InstrucoesGerais.c" line="1261"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;zero&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;zero&amp;#039; is assigned a value that is never used.">
            <location file="InstrucoesGerais.c" line="991"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;divinfo4&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;divinfo4&amp;#039; is assigned a value that is never used.">
            <location file="InstrucoesGerais.c" line="1281"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;divinfo4&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;divinfo4&amp;#039; is assigned a value that is never used.">
            <location file="InstrucoesGerais.c" line="1296"/>
        </error>
        <error id="memleak" severity="error" msg="Memory leak: tableswitch" verbose="Memory leak: tableswitch">
            <location file="InstrucoesGerais.c" line="578"/>
        </error>
        <error id="memleak" severity="error" msg="Memory leak: match" verbose="Memory leak: match">
            <location file="InstrucoesGerais.c" line="625"/>
        </error>
        <error id="memleak" severity="error" msg="Memory leak: desloc" verbose="Memory leak: desloc">
            <location file="InstrucoesGerais.c" line="625"/>
        </error>
        <error id="memleak" severity="error" msg="Memory leak: fieldsTemp" verbose="Memory leak: fieldsTemp">
            <location file="InstrucoesGerais.c" line="885"/>
        </error>
        <error id="memleak" severity="error" msg="Memory leak: fieldsTemp" verbose="Memory leak: fieldsTemp">
            <location file="InstrucoesGerais.c" line="933"/>
        </error>
        <error id="memleak" severity="error" msg="Memory leak: fieldsTemp" verbose="Memory leak: fieldsTemp">
            <location file="InstrucoesGerais.c" line="975"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;metodoMain&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;metodoMain&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="main.c" line="28"/>
        </error>
        <error id="invalidscanf" severity="warning" msg="scanf() without field width limits can crash with huge input data." verbose="scanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    char c[5];&#10;    scanf(&amp;quot;%s&amp;quot;, c);&#10;    return 0;&#10;}&#10;&#10;Typing in 5 or more characters may make the program crash. The correct usage here is &amp;#039;scanf(&amp;quot;%4s&amp;quot;, c);&amp;#039;, as the maximum field width does not include the terminating null byte.&#10;Source: http://linux.die.net/man/3/scanf&#10;Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c">
            <location file="main.c" line="38"/>
        </error>
        <error id="invalidscanf" severity="warning" msg="scanf() without field width limits can crash with huge input data." verbose="scanf() without field width limits can crash with huge input data. Add a field width specifier to fix this problem.&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    char c[5];&#10;    scanf(&amp;quot;%s&amp;quot;, c);&#10;    return 0;&#10;}&#10;&#10;Typing in 5 or more characters may make the program crash. The correct usage here is &amp;#039;scanf(&amp;quot;%4s&amp;quot;, c);&amp;#039;, as the maximum field width does not include the terminating null byte.&#10;Source: http://linux.die.net/man/3/scanf&#10;Source: http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/stdio/scanf.c">
            <location file="main.c" line="49"/>
        </error>
        <error id="syntaxError" severity="error" msg="syntax error" verbose="syntax error">
            <location file="SalvaInfo.c" line="401"/>
        </error>
    </errors>
</results>
