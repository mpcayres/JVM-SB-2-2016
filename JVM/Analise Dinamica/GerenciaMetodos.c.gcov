        -:    0:Source:GerenciaMetodos.c
        -:    0:Programs:12
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <string.h>
        -:    4:
        -:    5:#include "GerenciaMetodos.h"
        -:    6:
        -:    7:extern struct frame *frame_corrente;
        -:    8:
function recuperaMetodoMain called 0 returned 0% blocks executed 0%
    #####:    9:methodInfo* recuperaMetodoMain() {
        -:   10:	u1 *name, *descriptor;
        -:   11:	u2 name_length, descriptor_length;
        -:   12:	classStructure *main_class;
        -:   13:	int32_t i;
        -:   14:
    #####:   15:	main_class = capturaClassPorIndice(0);
call    0 never executed
    #####:   16:	for(i = 0; i < main_class->methodCount; i++) {
branch  0 never executed
branch  1 never executed
        -:   17:		
    #####:   18:		name = main_class->constantPool[(main_class->methods[i].nameIndex-1)].type.Utf8.bytes;
    #####:   19:		name_length = main_class->constantPool[(main_class->methods[i].nameIndex-1)].type.Utf8.length;
    #####:   20:		descriptor = main_class->constantPool[(main_class->methods[i].descriptorIndex-1)].type.Utf8.bytes;
    #####:   21:		descriptor_length = main_class->constantPool[(main_class->methods[i].descriptorIndex-1)].type.Utf8.length;
        -:   22:		
    #####:   23:		if((strncmp("main", (char *)name, name_length) == 0) && 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   24:			(strncmp("([Ljava/lang/String;)V", (char *) descriptor, descriptor_length) == 0)) return &(main_class->methods[i]);
        -:   25:			
        -:   26:	}
        -:   27:	
    #####:   28:	return NULL;
        -:   29:}
        -:   30:
function recuperaMetodoEstaticoInit called 0 returned 0% blocks executed 0%
    #####:   31:methodInfo* recuperaMetodoEstaticoInit(classStructure *main_class) {
        -:   32:	u1 *name, *descriptor;
        -:   33:	u2 name_length, descriptor_length;
        -:   34:	int32_t i;
        -:   35:
    #####:   36:	for(i = 0; i < main_class->methodCount; i++) {
branch  0 never executed
branch  1 never executed
        -:   37:		
    #####:   38:		name = main_class->constantPool[(main_class->methods[i].nameIndex-1)].type.Utf8.bytes;
    #####:   39:		name_length = main_class->constantPool[(main_class->methods[i].nameIndex-1)].type.Utf8.length;
    #####:   40:		descriptor = main_class->constantPool[(main_class->methods[i].descriptorIndex-1)].type.Utf8.bytes;
    #####:   41:		descriptor_length = main_class->constantPool[(main_class->methods[i].descriptorIndex-1)].type.Utf8.length;
        -:   42:		
    #####:   43:		if((strncmp("<clinit>", (char *)name, name_length) == 0) && 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   44:			(strncmp("()V", (char *)descriptor, descriptor_length) == 0)) return &(main_class->methods[i]);
        -:   45:	
        -:   46:	}
        -:   47:	
    #####:   48:	return NULL;
        -:   49:}
        -:   50:
function recuperaMetodoPorNome_IndiceDesc called 0 returned 0% blocks executed 0%
    #####:   51:methodInfo* recuperaMetodoPorNome_IndiceDesc(classStructure *main_class, classStructure *name_type_class, u2 name_type_index) {
        -:   52:	u1 *metodo_name, *metodo_descriptor;
        -:   53:	u2 metodo_name_len, metodo_descriptor_len, name_len, descriptor_len;
        -:   54:	char *name, *descriptor;
        -:   55:	int32_t i;
        -:   56:	
    #####:   57:	name = getNome(name_type_class, name_type_class->constantPool[name_type_index-1].type.NameType.nameIndex);
call    0 never executed
    #####:   58:	name_len = strlen(name);
    #####:   59:	descriptor = getNome(name_type_class, name_type_class->constantPool[name_type_index-1].type.NameType.descriptorIndex);
call    0 never executed
    #####:   60:	descriptor_len = strlen(descriptor);
        -:   61:	
    #####:   62:	for(i = 0; i < main_class->methodCount; i++) {
branch  0 never executed
branch  1 never executed
        -:   63:		
    #####:   64:		metodo_name = main_class->constantPool[(main_class->methods[i].nameIndex-1)].type.Utf8.bytes;
    #####:   65:		metodo_name_len = main_class->constantPool[(main_class->methods[i].nameIndex-1)].type.Utf8.length;
    #####:   66:		metodo_descriptor = main_class->constantPool[(main_class->methods[i].descriptorIndex-1)].type.Utf8.bytes;
    #####:   67:		metodo_descriptor_len = main_class->constantPool[(main_class->methods[i].descriptorIndex-1)].type.Utf8.length;
        -:   68:		
    #####:   69:		if(name_len != metodo_name_len && descriptor_len != metodo_descriptor_len) continue;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   70:	
    #####:   71:		if((strncmp((char *) name, (char *) metodo_name, metodo_name_len) == 0) && 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   72:			(strncmp((char *) descriptor, (char *) metodo_descriptor, metodo_descriptor_len) == 0))
    #####:   73:			return (main_class->methods + i);
        -:   74:		
        -:   75:	}
    #####:   76:	return NULL;
        -:   77:}
        -:   78:
function recuperaNumeroParametros called 0 returned 0% blocks executed 0%
    #####:   79:int32_t recuperaNumeroParametros(methodInfo *method, classStructure *class) {
    #####:   80:	int32_t i, numero_parametros = 0;
        -:   81:	u1 *bytes;
        -:   82:	u2 length;
        -:   83:
    #####:   84:	bytes = class->constantPool[(method->descriptorIndex-1)].type.Utf8.bytes;
    #####:   85:	length = class->constantPool[(method->descriptorIndex-1)].type.Utf8.length;
        -:   86:	
    #####:   87:	for(i = 0; i < length && bytes[i] != ')'; i++) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   88:		
    #####:   89:		if(bytes[i] == 'L') {
branch  0 never executed
branch  1 never executed
    #####:   90:			for( ; bytes[i] != ';'; i++);
branch  0 never executed
branch  1 never executed
    #####:   91:	     	numero_parametros++;	
    #####:   92:		} else if((bytes[i] == 'B') ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   93:				 (bytes[i] == 'C') ||
branch  0 never executed
branch  1 never executed
    #####:   94:				 (bytes[i] == 'F') || 
branch  0 never executed
branch  1 never executed
    #####:   95:				 (bytes[i] == 'I') ||
branch  0 never executed
branch  1 never executed
    #####:   96:				 (bytes[i] == 'S') ||
branch  0 never executed
branch  1 never executed
    #####:   97:				 (bytes[i] == 'Z') ) {
    #####:   98:			numero_parametros++;
    #####:   99:		} else if((bytes[i] == 'D') ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  100:				 (bytes[i] == 'J')) {
    #####:  101:			numero_parametros += 2;
        -:  102:		}
        -:  103:		
        -:  104:	}
        -:  105:	
    #####:  106:	return numero_parametros;
        -:  107:}
        -:  108:
function recuperaMetodoInit called 0 returned 0% blocks executed 0%
    #####:  109:methodInfo * recuperaMetodoInit(u1 *desc, u2 desc_len) {
    #####:  110:	return NULL;
        -:  111:}
        -:  112:
function executarMetodo called 0 returned 0% blocks executed 0%
    #####:  113:void executarMetodo() {
        -:  114:	
    #####:  115:	while(frame_corrente != NULL && (frame_corrente->pc) < frame_corrente->codeLength)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  116:		executarInstrucoes(frame_corrente->code[frame_corrente->pc]);
call    0 never executed
    #####:  117:	Libera_Frame();
call    0 never executed
        -:  118:	
    #####:  119:	if(returnType == RETURN_32) push((u4) returnValue);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  120:	else if(returnType == RETURN_64) pushU8( returnValue );
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  121:	
    #####:  122:	returnType = RETURN_NONE;
    #####:  123:	returnValue = 0;
        -:  124:	
    #####:  125:}
        -:  126:
function prepararMetodo called 0 returned 0% blocks executed 0%
    #####:  127:void prepararMetodo(methodInfo *method, classStructure *class) {
        -:  128:	int32_t i;
        -:  129:	
    #####:  130:	for(i = 0; i < method->attributeCount; i++)
branch  0 never executed
branch  1 never executed
    #####:  131:		if(method->attributes[i].tag == ATTRIBUTE_CODE)	break;
branch  0 never executed
branch  1 never executed
        -:  132:	
    #####:  133:	if(method->attributeCount != 0) {
branch  0 never executed
branch  1 never executed
    #####:  134:		if(method->attributes[i].tag != ATTRIBUTE_CODE) {
branch  0 never executed
branch  1 never executed
    #####:  135:			printf("\nErro: nao foi encontrado atributo code no metodo.");
call    0 never executed
    #####:  136:			exit(1);
call    0 never executed
        -:  137:		}
    #####:  138:		Novo_Frame(class, class->constantPool, &(method->attributes[i]));
call    0 never executed
        -:  139:	} else {
    #####:  140:		(method->attributeCount)++;
    #####:  141:		method->attributes = malloc(1 * sizeof(attributeInfo));
        -:  142:		
    #####:  143:		method->attributes[0].type.Code.codeLength = 0;
    #####:  144:		Novo_Frame(class, class->constantPool, &(method->attributes[0]));
call    0 never executed
        -:  145:	}
        -:  146:	
    #####:  147:}
